name: "CI"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
  merge_group:

concurrency:
  group: "ci-${{ github.event.pull_request.event.number || github.sha }}"
  cancel-in-progress: true

jobs:

  pkgdb-dev:
    name: "Dev: Pkgdb"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-latest-xl"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Install newer Nix"
        uses: "cachix/install-nix-action@v24"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"
        with:
          github-access-token:    "${{ secrets.NIX_GIT_TOKEN }}"
          substituter:            "${{ vars.FLOX_PUBLIC_CACHE }}"
          substituter-key:        "${{ secrets.FLOX_STORE_PUBLIC_NIX_SECRET_KEY }}"
          aws-access-key-id:      "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          ssh-key:                "${{ secrets.FLOXBOT_SSH_KEY }}"

      - name: "Configure Nix"
        run: |
          sudo echo 
          {
            echo "experimental-features = nix-command flakes";
            echo "accept-flake-config = true";
          } | sudo tee -a /etc/nix/nix.conf >/dev/null

      - name: "Build"
        run: |
          nix develop -L                        \
            --no-update-lock-file               \
            '.#ci'                              \
            --command just build-pkgdb;

      - name: "Test"
        run: |
          nix develop -L                        \
            --no-update-lock-file               \
            '.#ci'                              \
            --command just test-pkgdb;

      - name: "Run"
        run: |
          nix develop -L                        \
            --no-update-lock-file               \
            '.#ci'                              \
            --command just run-pkgdb --help;

  cli-dev:
    name: "Dev: CLI"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04-8core"
          - "macos-latest-xl"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Install newer Nix"
        uses: "cachix/install-nix-action@v24"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"
        with:
          github-access-token:    "${{ secrets.NIX_GIT_TOKEN }}"
          substituter:            "${{ vars.FLOX_PUBLIC_CACHE }}"
          substituter-key:        "${{ secrets.FLOX_STORE_PUBLIC_NIX_SECRET_KEY }}"
          aws-access-key-id:      "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          ssh-key:                "${{ secrets.FLOXBOT_SSH_KEY }}"

      - name: "Configure Nix"
        run: |
          sudo echo 
          {
            echo "experimental-features = nix-command flakes";
            echo "accept-flake-config = true";
          } | sudo tee -a /etc/nix/nix.conf >/dev/null

      - name: "Cache Cargo Cache"
        uses: "actions/cache@v3"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: "cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "cargo-${{ runner.os }}-"

      - name: "Build"
        run: |
          export RUST_BACKTRACE=1;
          nix develop -L                    \
            --no-update-lock-file           \
            '.#ci'                          \
            --command just build-cli;

      - name: "Test"
        run: |
          export RUST_BACKTRACE=1;
          nix develop -L                    \
            --no-update-lock-file           \
            '.#ci'                          \
            --command just test-cli;

      - name: "Run"
        run: |
          export RUST_BACKTRACE=1;
          nix develop -L                    \
            --no-update-lock-file           \
            '.#ci'                          \
            --command just run-cli --help;

# TODO: bring back docs
#    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#    permissions:
#      contents: read
#      pages: write
#      id-token: write
#
#- name: "Build Docs"
#  run: |
#    nix develop -L                    \
#      --no-update-lock-file           \
#      '.#ci'                          \
#      --command make -C pkgdb docs;
#    chmod -c -R +rX "pkgdb/docs/"|while read line; do
#      echo "::warning title=Invalid file permissions fixed::$line";
#    done

#- name: "Upload artifact"
#  uses: "actions/upload-pages-artifact@v2"
#  if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
#  with:
#    path: "pkgdb/docs"

#- name: "Deploy to GitHub Pages"
#  if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
#  id: "deployment"
#  uses: "actions/deploy-pages@v3"

  nix-build:
    name: "Nix: Build"
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"

    steps:
      - name: "Setup Tailscale"
        uses: "tailscale/github-action@v2"
        with:
          args: "--timeout 30s --login-server ${{ vars.TAILSCALE_URL }}"
          tags: "tag:ci"
          authkey: "${{ secrets.TAILSCALE_AUTH_KEY }}"

      - name: "Install newer Nix"
        uses: "cachix/install-nix-action@v24"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"
        with:
          github-access-token:    "${{ secrets.NIX_GIT_TOKEN }}"
          substituter:            "${{ vars.FLOX_PUBLIC_CACHE }}"
          substituter-key:        "${{ secrets.FLOX_STORE_PUBLIC_NIX_SECRET_KEY }}"
          aws-access-key-id:      "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          ssh-key:                "${{ secrets.FLOXBOT_SSH_KEY }}"
          remote-builders:        "${{ vars.FLOX_BUILDERS }}"

      - name: "Configure Nix"
        run: |
          sudo echo 
          {
            echo "experimental-features = nix-command flakes";
            echo "accept-flake-config = true";
          } | sudo tee -a /etc/nix/nix.conf >/dev/null

      - name: "Build"
        run: |
          if nix path-info                 \
              --store "$FLOX_SUBSTITUTER"  \
              --eval-store auto            \
              --builders ''                \
              -j0                          \
                'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox.outPath'; then
             echo paths already exist in substituter;
             exit 0;
          else
            nix build -L             \
              --no-update-lock-file  \
              --print-out-paths      \
                'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox'
          fi

  nix-test-cli:
    name: "Nix: Test CLI"
    runs-on: "ubuntu-latest"

    needs:
      - "nix-build"

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"

    steps:
      - name: "Setup Tailscale"
        uses: "tailscale/github-action@v2"
        with:
          args: "--timeout 30s --login-server ${{ vars.TAILSCALE_URL }}"
          tags: "tag:ci"
          authkey: "${{ secrets.TAILSCALE_AUTH_KEY }}"

      - name: "Install newer Nix"
        uses: "cachix/install-nix-action@v24"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"
        with:
          github-access-token:    "${{ secrets.NIX_GIT_TOKEN }}"
          substituter:            "${{ vars.FLOX_PUBLIC_CACHE }}"
          substituter-key:        "${{ secrets.FLOX_STORE_PUBLIC_NIX_SECRET_KEY }}"
          aws-access-key-id:      "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          ssh-key:                "${{ secrets.FLOXBOT_SSH_KEY }}"
          remote-builders:        "${{ vars.FLOX_BUILDERS }}"

      - name: "Configure Nix"
        run: |
          sudo echo 
          {
            echo "experimental-features = nix-command flakes";
            echo "accept-flake-config = true";
          } | sudo tee -a /etc/nix/nix.conf >/dev/null

      - name: "Find remote server to run tests on"
        run: |
          set -eo pipefail
          export REMOTE_SERVER=$(cat /etc/nix/machines | grep ${{ matrix.system }} | cut -f1 -d' ' | cut -f3 -d'/' | head -1 | sed 's/nixbld@//' ; )
          export REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$(mktemp)
          export REMOTE_PUBLIC_HOST_KEY=$(cat /etc/nix/machines | grep ${{ matrix.system }} | tr -s ' ' | cut -f8 -d' ' | base64 -d ; )
          printf "%s %s\n" "$REMOTE_SERVER" "$REMOTE_PUBLIC_HOST_KEY" > "$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
          echo "REMOTE_SERVER: $REMOTE_SERVER"
          echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE: $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
          cat $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE
          echo "REMOTE_SERVER=$REMOTE_SERVER" >> $GITHUB_ENV
          echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE" >> $GITHUB_ENV

      - name: "Build Bats Tests (./#flox-cli-tests)"
        run: |
          nix build -L \
              --no-update-lock-file \
              --print-out-paths \
              'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-cli-tests'
          nix copy --to "$FLOX_SUBSTITUTER" ./result

      - name: "Run Bats Tests (./#flox-cli-tests)"
        run: |
          ssh github@$REMOTE_SERVER \
            -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
            nix run \
                --accept-flake-config \
                --extra-experimental-features '"nix-command flakes"' \
                'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-cli-tests'

  nix-test-end2end-tests:
    name: "Nix: Test end2end"
    runs-on: "ubuntu-latest"

    needs:
      - "nix-build"

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"
          - "x86_64-darwin"
          - "aarch64-linux"
          - "aarch64-darwin"

    steps:
      - name: "Setup Tailscale"
        uses: "tailscale/github-action@v2"
        with:
          args: "--timeout 30s --login-server ${{ vars.TAILSCALE_URL }}"
          tags: "tag:ci"
          authkey: "${{ secrets.TAILSCALE_AUTH_KEY }}"

      - name: "Install newer Nix"
        uses: "cachix/install-nix-action@v24"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"
        with:
          github-access-token:    "${{ secrets.NIX_GIT_TOKEN }}"
          substituter:            "${{ vars.FLOX_PUBLIC_CACHE }}"
          substituter-key:        "${{ secrets.FLOX_STORE_PUBLIC_NIX_SECRET_KEY }}"
          aws-access-key-id:      "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          ssh-key:                "${{ secrets.FLOXBOT_SSH_KEY }}"
          remote-builders:        "${{ vars.FLOX_BUILDERS }}"

      - name: "Configure Nix"
        run: |
          sudo echo 
          {
            echo "experimental-features = nix-command flakes";
            echo "accept-flake-config = true";
          } | sudo tee -a /etc/nix/nix.conf >/dev/null

      - name: "Find remote server to run tests on"
        run: |
          set -eo pipefail
          export REMOTE_SERVER=$(cat /etc/nix/machines | grep ${{ matrix.system }} | cut -f1 -d' ' | cut -f3 -d'/' | head -1 | sed 's/nixbld@//' ; )
          export REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$(mktemp)
          export REMOTE_PUBLIC_HOST_KEY=$(cat /etc/nix/machines | grep ${{ matrix.system }} | tr -s ' ' | cut -f8 -d' ' | base64 -d ; )
          printf "%s %s\n" "$REMOTE_SERVER" "$REMOTE_PUBLIC_HOST_KEY" > "$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
          echo "REMOTE_SERVER: $REMOTE_SERVER"
          echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE: $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE"
          cat $REMOTE_SERVER_USER_KNOWN_HOSTS_FILE
          echo "REMOTE_SERVER=$REMOTE_SERVER" >> $GITHUB_ENV
          echo "REMOTE_SERVER_USER_KNOWN_HOSTS_FILE=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE" >> $GITHUB_ENV

      - name: "Build Bats Tests (./#flox-end2end)"
        run: |
          nix build -L \
              --no-update-lock-file \
              --print-out-paths \
              'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-end2end'
          nix copy --to "$FLOX_SUBSTITUTER" ./result

      - name: "Run Bats Tests (./#flox-end2end)"
        run: |
          ssh github@$REMOTE_SERVER \
            -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
            nix run \
                --accept-flake-config \
                --extra-experimental-features '"nix-command flakes"' \
                'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-end2end'

  report-failure:
    name: "Report Failure"
    runs-on: "ubuntu-latest"

    if: ${{ failure() && github.ref == 'refs/heads/main' && github.event_name == 'push' }}

    needs:
      - "nix-build"
      - "pkgdb-dev"
      - "cli-dev"
      # TODO: enable these when deemed reliable
      # - "nix-test-cli-tests"
      # - "nix-test-end2end"

    steps:
      - name: "Slack Notification"
        uses: "rtCamp/action-slack-notify@v2"
        env:
          SLACK_TITLE:      "Something broke CI for flox/flox on main"
          SLACK_FOOTER:     "Thank you for caring"
          SLACK_WEBHOOK:    "${{ secrets.SLACK_WEBHOOK_FOR_TEAM_ENGINEERING}}"
          SLACK_USERNAME:   "GitHub"
          SLACK_ICON_EMOJI: ":poop:"
          SLACK_COLOR:      "#ff2800"  # ferrari red -> https://encycolorpedia.com/ff2800
          SLACK_LINK_NAMES: true

  trigger-flox-installers-workflow:
    name: "Build installers"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: "ubuntu-22.04-8core"

    needs:
      - "nix-build"
      # TODO: enable these when deemed reliable
      # - "nix-test-cli-tests"
      # - "nix-test-end2end"

    steps:
      - name: "Trigger flox-installers workflow"
        uses: "convictional/trigger-workflow-and-wait@v1.6.5"
        with:
          owner:              "flox"
          repo:               "nix-installers"
          github_token:       "${{ secrets.NIX_GIT_TOKEN }}"
          github_user:        "floxbot"
          workflow_file_name: "ci.yml"
          ref:                "master"
          wait_interval:      10
          client_payload:     '{"TARGET":"git+ssh://git@github.com/flox/flox?ref=main&rev=${{ github.event.pull_request.head.sha || github.sha }}"}'
          propagate_failure:  false
          trigger_workflow:   true
          wait_workflow:      true
